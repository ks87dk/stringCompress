import javax.print.attribute.standard.Compression;

public class stringCompression {
    String s1 = "00000011 11110101 00011111 01110111 10100110 01100000 10101101 10010011 \n" +
            "00101010 11100100 00111000 00011000 10011110 10110010 00011111 11011011 \n" +
            "00000001 10110111 00010010 00110110 11111010 10100100 10101011 00111010 \n" +
            "01111100 01001111 11110001 11101010 00110111 01111101 00011000 01110001 \n" +
            "00101011 01111100 00001100 01001011 01101001 00110111 01010100 10101010 \n" +
            "01001101 11011000 10010000 01010011 01110100 01110010 10100101 10110101 \n" +
            "10011100 11100011 10010111 10100101 00101000 01110110 11001111 01111001 \n" +
            "10101111 10100011 00101000 11110101 10001110 11100110 10001111 10001011 \n" +
            "00101111 00100100 11100010 11110010 10011010 00001001 01100110 01111010 \n" +
            "10110111 11001110 00100000 00110111 01010111 00000010 01001110 11000100 \n" +
            "01100100 10001000 11010110 01110011 00001011 01100100 10110111 10001101 \n" +
            "10010001 01111111 10100111 10101011 01010000 10111011 00111010 11011101 \n" +
            "10101101 01111100 01111000 11110001 00001100 10001101 00111111 10101110 \n" +
            "01111101 00010000 01100011 10100101 01001111 10111010 01011000 01101001 \n" +
            "11000011 11100011 00111011 11000101 00100111 00100100 10011000 01100011 \n" +
            "01011011 10111001 01100011 11011101 00001110 10100111 01110010 11010110 \n" +
            "11111001 00110011 10101011 11100111 11111011 11001011 00100001 00100000 \n" +
            "01111000 01110111 11110110 11001100 00110011 11000110 00000110 01100000 \n" +
            "11110001 10100001 01111101 10101100 00010001 00100000 01111101 01000011 \n" +
            "10100000 11010101 11100001 10101000 10110110 01000110 11100011 01011111 \n" +
            "00100110 11011010 01101010 11011001 11100101 01101011 00011001 10000011 \n" +
            "00011111 00100110 10100100 10010011 10110100 10101110 11000111 11010001 \n" +
            "01100000 10000000 10101010 10111110 10001101 11111110 01110100 10000001 \n" +
            "10100111 00111111 11010111 00001001 10001111 00011110 10111111 11001000 \n" +
            "01010010 01111111 00011001 00000111 11101001 11011110 01011101 00011000 \n" +
            "01011101 00010110 01110110 00111000 10010100 11010100 01110010 11010100 \n" +
            "11111101 11111011 10111100 10000010 00111100 00101010 10011000 11110110 \n" +
            "10000100 10010101 00111001 01011111 10101101 10111011 00110101 01111000 \n" +
            "10010001 00111111 00110101 10010000 01011100 00010011 01001110 00000100 \n" +
            "01011100 10110100 00000010 00001001 10111100 11100101 01110011 11101010 \n" +
            "10111001 11100101 00011100 01111100 01110110 11101010 01010111 00111101 \n" +
            "10111001 00111011 00010111 11010000 01000001 01100000 01000110 11110110 \n" +
            "01011110 10000011 10000010 10110011 00101110 11101110 01001101 00100100 \n" +
            "10001010 00001010 01011011 01000001 10111000 10110111 01000110 01111010 \n" +
            "00110010 01111100 01000001 10001111 10111111 10100000 11110010 00100100 \n" +
            "00010110 00011001 10000001 11011011 11010110 10000100 10010110 00010000 \n" +
            "00000101 00110000 11101111 10111011 11101101 10110010 11110001 10100010 \n" +
            "10111100 01010011 01010000 11011011";

    public void compressString (String s1) {
        int count = 0;
        char temp = s1.charAt(0);
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt(i) == temp) {
                count++;
            }
            else {
                System.out.print(temp + "" + count);
                count = 1;
                temp = s1.charAt(i);
            }
        }
    }

    public static void main(String[] args) {
        stringCompression obj = new stringCompression();
        obj.compressString(obj.s1);
    }
}
